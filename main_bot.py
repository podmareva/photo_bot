# main_bot.py ‚Äî –û—á–∏—â–µ–Ω–Ω–∞—è –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway

import os
import io
import base64
import logging
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
from dotenv import load_dotenv
load_dotenv()

# –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
import requests
import aiohttp
from PIL import Image, ImageFilter
import numpy as np
import cv2

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞ (aiogram 3.x)
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–≤–µ–±—Ö—É–∫)
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application


# ========= 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï =========

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PIXELCUT_API_KEY = os.getenv("PIXELCUT_API_KEY")
# WEBHOOK_BASE_URL - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Railway
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MAIN_BOT_USERNAME = os.getenv("MAIN_BOT_USERNAME", "")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, OPENAI_API_KEY, PIXELCUT_API_KEY, WEBHOOK_BASE_URL]):
    raise RuntimeError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, OPENAI_API_KEY, PIXELCUT_API_KEY, WEBHOOK_BASE_URL) –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ aiogram
bot = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)


# ========= 2. –¢–ï–ö–°–¢–´ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ =========

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–ü—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ¬ª.\n\n"
    "–û–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Å–¥–µ–ª–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ,\n"
    "‚Ä¢ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ—Ä–º—ã, —Ü–≤–µ—Ç–∞ –∏ –Ω–∞–¥–ø–∏—Å–µ–π,\n"
    "‚Ä¢ —Å–æ–∑–¥–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Å—Ü–µ–Ω—ã (—Å—Ç—É–¥–∏–π–Ω–æ / –Ω–∞ —á–µ–ª–æ–≤–µ–∫–µ / –≤ —Ä—É–∫–∞—Ö).\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ ¬´–°–¢–ê–†–¢¬ª."
)

REQUIREMENTS = (
    "üì• –î–æ–±–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ.\n\n"
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω–∏–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
    "‚Ä¢ –†–æ–≤–Ω—ã–π —Å–≤–µ—Ç –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö —Ç–µ–Ω–µ–π.\n"
    "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π —Ñ–æ–Ω.\n"
    "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç —Ü–µ–ª–∏–∫–æ–º, –∫—Ä–∞—è –Ω–µ –æ–±—Ä–µ–∑–∞–Ω—ã.\n"
    "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ª—É—á—à–µ ¬´–î–æ–∫—É–º–µ–Ω—Ç¬ª, —á—Ç–æ–±—ã Telegram –Ω–µ —Å–∂–∏–º–∞–ª)."
)

PROMPTS_FILE = Path(__file__).parent / "prompts_cheatsheet.md"
PROMPTS_MD = """# üìì –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω
(—Å–æ–∫—Ä–∞—â–µ–Ω–æ) ‚Äî –æ–ø–∏—à–∏ —Ñ–æ–Ω/—Å–≤–µ—Ç/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –±–µ–∑ —Ç–æ–≤–∞—Ä–∞; –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.
–ü—Ä–∏–º–µ—Ä—ã: studio soft light; dark premium look; glossy marble; cozy interior, warm sunlight; etc.
"""

# ========= –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) =========
class GenStates(StatesGroup):
    waiting_start = State()
    waiting_photo = State()
    waiting_size = State()
    waiting_variants = State()
    waiting_style = State()
    waiting_placement = State()

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
class Placement(str, Enum):
    STUDIO = "–°—Ç—É–¥–∏–π–Ω–æ (–Ω–∞ —Ñ–æ–Ω–µ)"
    ON_BODY = "–ù–∞ —á–µ–ª–æ–≤–µ–∫–µ (—É–∫—Ä–∞—à–µ–Ω–∏–µ/–æ–¥–µ–∂–¥–∞)"
    IN_HAND = "–í —Ä—É–∫–∞—Ö (–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω)"

start_kb = ReplyKeyboardBuilder()
start_kb.button(text="–°–¢–ê–†–¢")
start_kb.button(text="üìì –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –ø—Ä–æ–º—Ç–∞–º")
start_kb.adjust(2)
START_KB = start_kb.as_markup(resize_keyboard=True)

place_kb = ReplyKeyboardBuilder()
for p in (Placement.STUDIO.value, Placement.ON_BODY.value, Placement.IN_HAND.value):
    place_kb.button(text=p)
place_kb.adjust(1)
PLACEMENT_KB = place_kb.as_markup(resize_keyboard=True)

PRESETS = [
    "–ö–∞—Ç–∞–ª–æ–≥: —á–∏—Å—Ç—ã–π —Å—Ç—É–¥–∏–π–Ω—ã–π —Ñ–æ–Ω, –º—è–≥–∫–∞—è —Ç–µ–Ω—å",
    "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º: –æ–¥–Ω–æ—Ç–æ–Ω, –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏",
    "–¢—ë–º–Ω—ã–π –ø—Ä–µ–º–∏—É–º: low-key, –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç",
    "–ú—Ä–∞–º–æ—Ä/–≥–ª—è–Ω–µ—Ü: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –±–ª–∏–∫–∏",
    "Nature: –¥–µ—Ä–µ–≤–æ/–ª–µ–Ω/–∑–µ–ª–µ–Ω—å, –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç",
    "Flat lay: –≤–∏–¥ —Å–≤–µ—Ä—Ö—É, –º–∏–Ω–∏–º—É–º –ø—Ä–æ–ø—Å–æ–≤",
]
style_kb_builder = ReplyKeyboardBuilder()
for p in PRESETS:
    style_kb_builder.button(text=p)
style_kb_builder.button(text="–°–≤–æ—è —Å—Ü–µ–Ω–∞ (–æ–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º)")
style_kb_builder.adjust(1)
STYLE_KB = style_kb_builder.as_markup(resize_keyboard=True)

size_kb = ReplyKeyboardBuilder()
for s in ("1:1", "4:5", "3:4", "16:9", "9:16"):
    size_kb.button(text=s)
size_kb.adjust(3, 2)
SIZE_KB = size_kb.as_markup(resize_keyboard=True)

var_kb = ReplyKeyboardBuilder()
for n in ("1", "2", "3", "4", "5"):
    var_kb.button(text=n)
var_kb.adjust(5)
VAR_KB = var_kb.as_markup(resize_keyboard=True)


# ========= 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =========

def ensure_prompts_file():
    if not PROMPTS_FILE.exists():
        PROMPTS_FILE.write_text(PROMPTS_MD, encoding="utf-8")

async def download_bytes_from_message(message: Message) -> tuple[bytes, str]:
    if message.document:
        file_id = message.document.file_id
        buf = io.BytesIO()
        await bot.download(message.document, destination=buf)
        return buf.getvalue(), file_id
    elif message.photo:
        file_id = message.photo[-1].file_id
        buf = io.BytesIO()
        await bot.download(message.photo[-1], destination=buf)
        return buf.getvalue(), file_id
    else:
        raise ValueError("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞")

def ensure_jpg_bytes(image_bytes: bytes) -> bytes:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB JPEG –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API."""
    img = Image.open(io.BytesIO(image_bytes))
    if img.mode != "RGB":
        img = img.convert("RGB")
    buf = io.BytesIO()
    img.save(buf, format="JPEG", quality=95)
    return buf.getvalue()


# ========= 4. –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =========

async def remove_bg_pixelcut(image_bytes: bytes) -> bytes:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API Pixelcut."""
    endpoint = "https://api.pixelcut.ai/v1/remove-background"
    headers = {"X-API-Key": PIXELCUT_API_KEY}
    
    data = aiohttp.FormData()
    data.add_field('image',
                   ensure_jpg_bytes(image_bytes),
                   filename='input.jpg',
                   content_type='image/jpeg')

    timeout = aiohttp.ClientTimeout(total=120)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            async with session.post(endpoint, headers=headers, data=data) as response:
                if response.status == 200:
                    return await response.read()
                elif response.status == 401:
                    raise RuntimeError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) –≤ Pixelcut. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á.")
                else:
                    detail = await response.text()
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ API Pixelcut (—Å—Ç–∞—Ç—É—Å {response.status}): {detail}")
        except aiohttp.ClientError as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")


def generate_background(prompt: str, size: str) -> Image.Image:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API OpenAI DALL-E 3."""
    endpoint = "https://api.openai.com/v1/images/generations"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "dall-e-3",
        "prompt": f"High-quality product photography background only. {prompt}",
        "size": size,
        "n": 1,
        "quality": "hd",
        "response_format": "b64_json"
    }
    response = requests.post(endpoint, headers=headers, json=payload, timeout=120)
    if response.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–∞ OpenAI ({response.status_code}): {response.text}")
    
    b64_json = response.json()["data"][0]["b64_json"]
    bg_bytes = base64.b64decode(b64_json)
    return Image.open(io.BytesIO(bg_bytes)).convert("RGBA")


def compose_subject_on_bg(subject_png: bytes, bg_img: Image.Image) -> Image.Image:
    """–ù–∞–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Ñ–æ–Ω —Å —Ç–µ–Ω—å—é."""
    subj = Image.open(io.BytesIO(subject_png)).convert("RGBA")
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    canvas_w, canvas_h = bg_img.size
    target_h = int(canvas_h * 0.75)
    scale = target_h / subj.height
    subj = subj.resize((int(subj.width * scale), target_h), Image.LANCZOS)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∏
    alpha = subj.getchannel('A')
    shadow = Image.new("RGBA", subj.size, (0, 0, 0, 160))
    shadow.putalpha(alpha)
    shadow = shadow.filter(ImageFilter.GaussianBlur(12))
    
    # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
    out = bg_img.copy()
    x = (canvas_w - subj.width) // 2
    y = canvas_h - subj.height - int(canvas_h * 0.05)
    
    out.alpha_composite(shadow, (x + 8, y + 18))
    out.alpha_composite(subj, (x, y))
    return out


def seamless_place(subject_png: bytes, back_img: Image.Image, scale_by_height: float, x_center: int, y_center: int) -> Image.Image:
    """"–ë–µ—Å—à–æ–≤–Ω–æ–µ" –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ–Ω (–¥–ª—è —Ä—É–∫/—Ç–µ–ª–∞)."""
    fore = Image.open(io.BytesIO(subject_png)).convert("RGBA")
    back = back_img.convert("RGB")
    
    target_h = int(back.height * scale_by_height)
    ratio = target_h / fore.height
    fore = fore.resize((int(fore.width * ratio), target_h), Image.LANCZOS)
    
    fore_np = cv2.cvtColor(np.array(fore), cv2.COLOR_RGBA2BGRA)
    back_np = cv2.cvtColor(np.array(back), cv2.COLOR_RGB2BGR)
    mask = fore_np[:, :, 3]
    
    center = (x_center, y_center)
    
    mixed = cv2.seamlessClone(fore_np[:,:,:3], back_np, mask, center, cv2.NORMAL_CLONE)
    return Image.fromarray(cv2.cvtColor(mixed, cv2.COLOR_BGR2RGB))


# ========= 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (–•–≠–ù–î–õ–ï–†–´) =========

@router.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    ensure_prompts_file()
    await message.answer(WELCOME, reply_markup=START_KB)
    await state.set_state(GenStates.waiting_start)

@router.message(GenStates.waiting_start, F.text == "üìì –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –ø—Ä–æ–º—Ç–∞–º")
async def send_cheatsheet(message: Message):
    try:
        await message.answer_document(FSInputFile(PROMPTS_FILE))
    except Exception:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å–æ —à–ø–∞—Ä–≥–∞–ª–∫–æ–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@router.message(GenStates.waiting_start, F.text.casefold() == "—Å—Ç–∞—Ä—Ç")
async def pressed_start(message: Message, state: FSMContext):
    await message.answer(REQUIREMENTS)
    await state.set_state(GenStates.waiting_photo)

@router.message(GenStates.waiting_photo, F.photo | F.document)
async def got_photo(message: Message, state: FSMContext):
    try:
        image_bytes, _ = await download_bytes_from_message(message)
        await state.update_data(image=image_bytes)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=PLACEMENT_KB)
        await state.set_state(GenStates.waiting_placement)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

@router.message(GenStates.waiting_placement, F.text)
async def choose_placement(message: Message, state: FSMContext):
    await state.update_data(placement=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω):", reply_markup=SIZE_KB)
    await state.set_state(GenStates.waiting_size)

@router.message(GenStates.waiting_size, F.text)
async def choose_size(message: Message, state: FSMContext):
    await state.update_data(size_aspect=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑?", reply_markup=VAR_KB)
    await state.set_state(GenStates.waiting_variants)

@router.message(GenStates.waiting_variants, F.text)
async def choose_variants(message: Message, state: FSMContext):
    try:
        n = int(message.text or "1")
    except ValueError:
        n = 1
    await state.update_data(n_variants=min(5, max(1, n)))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É –∏–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ—é:", reply_markup=STYLE_KB)
    await state.set_state(GenStates.waiting_style)


@router.message(GenStates.waiting_style, F.text)
async def generate_result(message: Message, state: FSMContext):
    style_text = message.text
    await state.update_data(style=style_text)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞—é –º–∞–≥–∏—é ‚ú®\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...", reply_markup=None)

    try:
        data = await state.get_data()
        image_bytes = data.get("image")
        placement = data.get("placement", Placement.STUDIO.value)
        size_aspect = data.get("size_aspect", "1:1")
        n_variants = data.get("n_variants", 1)
        
        openai_sizes = {"1:1": "1024x1024", "4:5": "1024x1792", "3:4": "1024x1792", "16:9": "1792x1024", "9:16": "1024x1792"}
        openai_size = openai_sizes.get(size_aspect, "1024x1024")

        msg = await message.answer("–®–∞–≥ 1/3: –£–¥–∞–ª—è—é —Ñ–æ–Ω —Å —Ç–≤–æ–µ–≥–æ —Ñ–æ—Ç–æ...")
        cut_png = await remove_bg_pixelcut(image_bytes)

        for i in range(n_variants):
            await msg.edit_text(f"–®–∞–≥ 2/3: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—É ({i+1}/{n_variants})...")
            
            prompts = {
                Placement.STUDIO.value: f"{style_text}. Studio lighting, photorealistic.",
                Placement.ON_BODY.value: f"{style_text}. Photorealistic human, soft light.",
                Placement.IN_HAND.value: f"{style_text}. Photorealistic hands close-up, soft light."
            }
            bg = generate_background(prompts.get(placement, style_text), size=openai_size)

            await msg.edit_text(f"–®–∞–≥ 3/3: –°–æ–≤–º–µ—â–∞—é —Ç–æ–≤–∞—Ä –∏ —Ñ–æ–Ω ({i+1}/{n_variants})...")
            
            if placement == Placement.STUDIO.value:
                result = compose_subject_on_bg(cut_png, bg)
            else:
                bw, bh = bg.size
                scale = 0.26 if placement == Placement.ON_BODY.value else 0.40
                center_x = int(bw * 0.5)
                center_y = int(bh * 0.4) if placement == Placement.ON_BODY.value else int(bh * 0.5)
                result = seamless_place(cut_png, bg, scale_by_height=scale, x_center=center_x, y_center=center_y)

            buf = io.BytesIO()
            result.save(buf, format="PNG")
            
            filename = f"result_{i+1}.png"
            await message.answer_document(
                BufferedInputFile(buf.getvalue(), filename),
                caption=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}/{n_variants}"
            )

        await msg.delete()
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=START_KB)
        await state.set_state(GenStates.waiting_start)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•\n–û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ —Å /start.")
        await state.set_state(GenStates.waiting_photo) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —à–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ


# ========= 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê (–í–ï–ë–•–£–ö) =========

async def on_startup(bot_instance: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    webhook_url = f"{WEBHOOK_BASE_URL}/webhook/{BOT_TOKEN}"
    await bot_instance.set_webhook(webhook_url, drop_pending_updates=True)
    me = await bot.get_me()
    logging.info("–ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: %s", me.username, webhook_url)

async def on_shutdown(bot_instance: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot_instance.delete_webhook()
    await bot.session.close()

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(lambda a: on_startup(bot))
    app.on_shutdown.append(lambda a: on_shutdown(bot))

    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è aiogram
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_handler.register(app, path=f"/webhook/{BOT_TOKEN}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # Railway —Å–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –Ω—É–∂–Ω—ã–π PORT –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()

